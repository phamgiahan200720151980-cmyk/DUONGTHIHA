import express from 'express';
import cors from 'cors';
import multer from 'multer';
import mammoth from 'mammoth';
import { GoogleGenAI } from '@google/genai';
import fs from 'fs';
import path from 'path';

// DON'T DELETE THIS COMMENT
// Follow these instructions when using this blueprint:
// - Note that the newest Gemini model series is "gemini-2.5-flash" or gemini-2.5-pro"
//   - do not change this unless explicitly requested by the user

const app = express();
const PORT = 5000;

// Kh·ªüi t·∫°o Gemini AI client
const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || "" });

// C·∫•u h√¨nh multer ƒë·ªÉ upload file
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadDir = 'uploads';
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir);
    }
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + '-' + file.originalname);
  }
});

const upload = multer({ 
  storage: storage,
  limits: { fileSize: 10 * 1024 * 1024 }, // 10MB
  fileFilter: (req, file, cb) => {
    const fileExt = path.extname(file.originalname).toLowerCase();
    const allowedExts = ['.jpg', '.jpeg', '.png', '.gif', '.txt', '.docx'];
    const allowedMimeTypes = [
      'image/jpeg', 'image/png', 'image/gif',
      'text/plain',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    ];
    
    if (allowedExts.includes(fileExt) || allowedMimeTypes.includes(file.mimetype)) {
      return cb(null, true);
    } else {
      cb(new Error('Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (jpg, png, gif) ho·∫∑c t√†i li·ªáu (txt, docx). L∆∞u √Ω: Ch·ªâ h·ªó tr·ª£ file Word ƒë·ªãnh d·∫°ng .docx, kh√¥ng h·ªó tr·ª£ .doc c≈©.'));
    }
  }
});

// Helper function ƒë·ªÉ retry khi API b·ªã overload
async function callGeminiWithRetry(apiCall, maxRetries = 3) {
  for (let i = 0; i < maxRetries; i++) {
    try {
      return await apiCall();
    } catch (error) {
      const isOverloaded = error.message && error.message.includes('overloaded');
      const isLastAttempt = i === maxRetries - 1;
      
      if (isOverloaded && !isLastAttempt) {
        console.log(`API overloaded, retrying... (${i + 1}/${maxRetries})`);
        await new Promise(resolve => setTimeout(resolve, 2000 * (i + 1))); // Exponential backoff
        continue;
      }
      
      if (isOverloaded) {
        throw new Error('Gemini AI ƒëang qu√° t·∫£i. Vui l√≤ng th·ª≠ l·∫°i sau v√†i gi√¢y. üîÑ');
      }
      
      throw error;
    }
  }
}

app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));
app.use(express.static('.'));
app.use('/uploads', express.static('uploads'));

// API endpoint ƒë·ªÉ t·∫°o c√¢u h·ªèi v√† ch·∫•m b√†i
app.post('/api/generate', async (req, res) => {
  try {
    const { prompt } = req.body;
    
    if (!prompt) {
      return res.status(400).json({ error: 'Prompt is required' });
    }

    // G·ªçi Gemini AI v·ªõi retry
    const response = await callGeminiWithRetry(async () => {
      return await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt,
      });
    });

    const text = response.text || "Kh√¥ng th·ªÉ t·∫°o n·ªôi dung";
    
    res.json({ text });
  } catch (error) {
    console.error('Error calling Gemini AI:', error);
    res.status(500).json({ 
      error: error.message || 'C√≥ l·ªói x·∫£y ra khi g·ªçi AI' 
    });
  }
});

// API endpoint ƒë·ªÉ ch·∫•m b√†i t·ª´ h√¨nh ·∫£nh
app.post('/api/grade-image', upload.single('image'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: 'Vui l√≤ng upload h√¨nh ·∫£nh' });
    }

    const { question, subject } = req.body;
    const imagePath = req.file.path;
    
    // ƒê·ªçc file h√¨nh ·∫£nh th√†nh base64
    const imageBuffer = fs.readFileSync(imagePath);
    const base64Image = imageBuffer.toString('base64');
    const mimeType = req.file.mimetype;

    // T·∫°o prompt cho AI
    const prompt = `B·∫°n l√† gi√°o vi√™n ${subject === 'toan' ? 'To√°n' : 'V·∫≠t L√Ω'} THPT.
H√£y NH·∫¨N DI·ªÜN ch·ªØ vi·∫øt trong h√¨nh ·∫£nh b√†i l√†m c·ªßa h·ªçc sinh, sau ƒë√≥ CH·∫§M ƒêI·ªÇM (0‚Äì10) v√† NH·∫¨N X√âT NG·∫ÆN G·ªåN.

‚ùñ ƒê·ªÅ b√†i: ${question}

H√£y:
1. Nh·∫≠n di·ªán n·ªôi dung b√†i l√†m t·ª´ h√¨nh ·∫£nh
2. Ch·∫•m ƒëi·ªÉm t·ª´ 0-10
3. ƒê∆∞a ra nh·∫≠n x√©t chi ti·∫øt

QUAN TR·ªåNG: V·ªõi M·ªåI c√¥ng th·ª©c to√°n h·ªçc, B·∫ÆT BU·ªòC ph·∫£i d√πng LaTeX trong d·∫•u $.
V√≠ d·ª•: $x^2$, $\\frac{a}{b}$, $\\sqrt{x}$, $\\omega$, $\\alpha$`;

    // G·ªçi Gemini Vision API v·ªõi retry
    const response = await callGeminiWithRetry(async () => {
      return await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: [
          {
            parts: [
              { text: prompt },
              { 
                inlineData: {
                  mimeType: mimeType,
                  data: base64Image
                }
              }
            ]
          }
        ]
      });
    });

    const text = response.text || "Kh√¥ng th·ªÉ ph√¢n t√≠ch h√¨nh ·∫£nh";
    
    // X√≥a file sau khi x·ª≠ l√Ω
    fs.unlinkSync(imagePath);
    
    res.json({ text });
  } catch (error) {
    console.error('Error processing image:', error);
    if (req.file && fs.existsSync(req.file.path)) {
      fs.unlinkSync(req.file.path);
    }
    res.status(500).json({ 
      error: error.message || 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω h√¨nh ·∫£nh' 
    });
  }
});

// API endpoint ƒë·ªÉ ch·∫•m b√†i t·ª´ file
app.post('/api/grade-file', upload.single('file'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: 'Vui l√≤ng upload file' });
    }

    const { question, subject } = req.body;
    const filePath = req.file.path;
    const fileExt = path.extname(req.file.originalname).toLowerCase();

    let fileContent = '';
    let prompt = '';

    // X·ª≠ l√Ω theo lo·∫°i file
    if (fileExt === '.txt') {
      fileContent = fs.readFileSync(filePath, 'utf-8');
      prompt = `B·∫°n l√† gi√°o vi√™n ${subject === 'toan' ? 'To√°n' : 'V·∫≠t L√Ω'} THPT.
H√£y CH·∫§M ƒêI·ªÇM (0‚Äì10) v√† NH·∫¨N X√âT NG·∫ÆN G·ªåN cho b√†i l√†m sau:

‚ùñ ƒê·ªÅ b√†i: ${question}
‚ùñ B√†i l√†m c·ªßa h·ªçc sinh:
${fileContent}

QUAN TR·ªåNG: V·ªõi M·ªåI c√¥ng th·ª©c to√°n h·ªçc, B·∫ÆT BU·ªòC ph·∫£i d√πng LaTeX trong d·∫•u $.`;
    } else if (fileExt === '.docx') {
      // X·ª≠ l√Ω file Word (.docx only)
      try {
        const result = await mammoth.extractRawText({ path: filePath });
        fileContent = result.value;
        
        if (!fileContent.trim()) {
          fs.unlinkSync(filePath);
          return res.status(400).json({ error: 'Kh√¥ng th·ªÉ ƒë·ªçc n·ªôi dung file Word. File c√≥ th·ªÉ b·ªã l·ªói ho·∫∑c r·ªóng.' });
        }
        
        prompt = `B·∫°n l√† gi√°o vi√™n ${subject === 'toan' ? 'To√°n' : 'V·∫≠t L√Ω'} THPT.
H√£y CH·∫§M ƒêI·ªÇM (0‚Äì10) v√† NH·∫¨N X√âT NG·∫ÆN G·ªåN cho b√†i l√†m sau:

‚ùñ ƒê·ªÅ b√†i: ${question}
‚ùñ B√†i l√†m c·ªßa h·ªçc sinh:
${fileContent}

QUAN TR·ªåNG: V·ªõi M·ªåI c√¥ng th·ª©c to√°n h·ªçc, B·∫ÆT BU·ªòC ph·∫£i d√πng LaTeX trong d·∫•u $.`;
      } catch (docError) {
        console.error('Error reading .docx:', docError);
        fs.unlinkSync(filePath);
        return res.status(400).json({ error: 'Kh√¥ng th·ªÉ ƒë·ªçc file Word. Vui l√≤ng ƒë·∫£m b·∫£o file l√† ƒë·ªãnh d·∫°ng .docx h·ª£p l·ªá.' });
      }
    } else if (['.jpg', '.jpeg', '.png', '.gif'].includes(fileExt)) {
      // N·∫øu l√† h√¨nh ·∫£nh, x·ª≠ l√Ω nh∆∞ API grade-image
      const imageBuffer = fs.readFileSync(filePath);
      const base64Image = imageBuffer.toString('base64');
      const mimeType = req.file.mimetype;

      prompt = `B·∫°n l√† gi√°o vi√™n ${subject === 'toan' ? 'To√°n' : 'V·∫≠t L√Ω'} THPT.
H√£y NH·∫¨N DI·ªÜN ch·ªØ vi·∫øt trong h√¨nh ·∫£nh, sau ƒë√≥ CH·∫§M ƒêI·ªÇM (0‚Äì10) v√† NH·∫¨N X√âT.

‚ùñ ƒê·ªÅ b√†i: ${question}

QUAN TR·ªåNG: V·ªõi M·ªåI c√¥ng th·ª©c to√°n h·ªçc, B·∫ÆT BU·ªòC ph·∫£i d√πng LaTeX trong d·∫•u $.`;

      const response = await callGeminiWithRetry(async () => {
        return await ai.models.generateContent({
          model: "gemini-2.5-flash",
          contents: [{
            parts: [
              { text: prompt },
              { inlineData: { mimeType: mimeType, data: base64Image }}
            ]
          }]
        });
      });

      const text = response.text || "Kh√¥ng th·ªÉ ph√¢n t√≠ch file";
      fs.unlinkSync(filePath);
      return res.json({ text });
    } else {
      fs.unlinkSync(filePath);
      return res.status(400).json({ error: 'ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£' });
    }

    // G·ªçi AI ƒë·ªÉ ch·∫•m b√†i v·ªõi retry
    const response = await callGeminiWithRetry(async () => {
      return await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt
      });
    });

    const text = response.text || "Kh√¥ng th·ªÉ ch·∫•m b√†i";
    
    // X√≥a file sau khi x·ª≠ l√Ω
    fs.unlinkSync(filePath);
    
    res.json({ text });
  } catch (error) {
    console.error('Error processing file:', error);
    if (req.file && fs.existsSync(req.file.path)) {
      fs.unlinkSync(req.file.path);
    }
    res.status(500).json({ 
      error: error.message || 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω file' 
    });
  }
});

// API endpoint cho chatbox v·ªõi gi√°o vi√™n AI
app.post('/api/chat', async (req, res) => {
  try {
    const { message, subject } = req.body;
    
    if (!message) {
      return res.status(400).json({ error: 'Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' });
    }

    const prompt = `B·∫°n l√† gi√°o vi√™n ${subject === 'toan' ? 'To√°n' : 'V·∫≠t L√Ω'} THPT th√¢n thi·ªán v√† nhi·ªát t√¨nh.
H·ªçc sinh h·ªèi: ${message}

H√£y tr·∫£ l·ªùi m·ªôt c√°ch r√µ r√†ng, d·ªÖ hi·ªÉu v√† khuy·∫øn kh√≠ch h·ªçc sinh.
QUAN TR·ªåNG: V·ªõi M·ªåI c√¥ng th·ª©c to√°n h·ªçc, B·∫ÆT BU·ªòC ph·∫£i d√πng LaTeX trong d·∫•u $.
V√≠ d·ª•: $x^2$, $\\frac{a}{b}$, $\\sqrt{x}$`;

    const response = await callGeminiWithRetry(async () => {
      return await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt
      });
    });

    const text = response.text || "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi l√∫c n√†y.";
    
    res.json({ text });
  } catch (error) {
    console.error('Error in chat:', error);
    res.status(500).json({ 
      error: error.message || 'C√≥ l·ªói x·∫£y ra trong chat' 
    });
  }
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`‚úÖ Server ƒëang ch·∫°y t·∫°i http://0.0.0.0:${PORT}`);
  console.log(`‚úÖ Gemini API Key: ${process.env.GEMINI_API_KEY ? 'ƒê√£ c·∫•u h√¨nh' : 'Ch∆∞a c·∫•u h√¨nh'}`);
});
